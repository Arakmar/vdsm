#
# Copyright 2007-2014 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#

"""
This module provides DSA software versioning information for
python based components
"""
import os

version_name = "Snow Man"
# FIXME: As soon as we can provide a long version/release to oVirt-Engine
#        remove from vdsm.spec the sed to replace the below macros
software_version = "@PACKAGE_VERSION@"
software_revision = "@PACKAGE_RELEASE@"
raw_version_revision = "@PACKAGE_VERSION@.@PACKAGE_RELEASE@"


def is_el6():
    def _parseKeyVal(lines, delim='='):
        d = {}
        for line in lines:
            kv = line.split(delim, 1)
            if len(kv) != 2:
                continue
            k, v = map(str.strip, kv)
            d[k] = v
        return d

    out = False
    ver = None
    if os.path.exists('/etc/rhev-hypervisor-release'):
        ver = _parseKeyVal(file('/etc/default/version')).get('VERSION', '')
    elif os.path.exists('/etc/redhat-release'):
        import rpm
        ts = rpm.TransactionSet()
        for er in ts.dbMatch('basenames', '/etc/redhat-release'):
            ver = er['version']

    if ver and ver.startswith('6'):
        out = True

    return out


version_info = {
    'version_name': version_name,
    'software_version': software_version,
    'software_revision': software_revision,
    'supportedProtocols': ['2.2', '2.3'],
}
if is_el6():
    version_info.update({
                'supportedENGINEs': ['3.0', '3.1', '3.2', '3.3', '3.4', '3.5'],
                'clusterLevels': ['3.0', '3.1', '3.2', '3.3', '3.4', '3.5'],
            })
else:
    version_info.update({
            'supportedENGINEs': ['3.4', '3.5'],
            'clusterLevels': ['3.4', '3.5'],
        })
