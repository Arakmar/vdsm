#
# Copyright 2008-2017 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#

try:
    from sos.plugins import Plugin, RedHatPlugin
except ImportError:
    import sos.plugintools
    Plugin = RedHatPlugin = sos.plugintools.PluginBase

import os
import stat
import subprocess


def _importVdsmPylibModule(modName):
    import imp
    from distutils.sysconfig import get_python_lib
    modFile, modPath, modDesc = imp.find_module(
        modName, [os.path.join(get_python_lib(False), "vdsm")])
    mod = imp.load_module(modName, modFile, modPath, modDesc)
    return mod


# This is hack for import vdsm.config module. because this plugin's name was
# same with vdsm module, so it can not import vdsm.config directly. And we
# keep plugin's name for compatibility.
config = _importVdsmPylibModule('config').config


class vdsm(Plugin, RedHatPlugin):
    """VDSM server related information
    """

    optionList = [("logsize", 'max size (MiB) to collect per log file', '',
                   False)]

    # Make compatible com sos version >= 3
    if not hasattr(Plugin, 'addCopySpec'):
        addCopySpec = Plugin.add_copy_spec
        # sosreport 3.4 replaced add_copy_spec_limit with add_copy_spec
        if hasattr(Plugin, 'add_copy_spec_limit'):
            addCopySpecLimit = Plugin.add_copy_spec_limit
        else:
            addCopySpecLimit = Plugin.add_copy_spec
        collectExtOutput = Plugin.add_cmd_output
        getOption = Plugin.get_option
        addForbiddenPath = Plugin.add_forbidden_path

    def setup(self):
        os.environ["LVM_SYSTEM_DIR"] = "@VDSMRUNDIR@/lvm"
        self.addForbiddenPath('/etc/pki/vdsm/keys/*')
        self.addForbiddenPath('/etc/pki/vdsm/libvirt-spice/*-key.*')
        self.addForbiddenPath('/etc/pki/libvirt/private/*')

        self.collectExtOutput("service vdsmd status")
        self.addCopySpec("/tmp/vds_installer*")
        self.addCopySpec("/tmp/vds_bootstrap*")
        self.addCopySpec("/etc/vdsm/*")
        self.addCopySpec("/etc/vdsm-reg/*")
        logsize = self.getOption('logsize')
        if logsize is not None:
            self.addCopySpecLimit("/var/log/vdsm/*", logsize)
            self.addCopySpecLimit("/var/log/vdsm-reg/*", logsize)
        else:
            self.addCopySpec("/var/log/vdsm/*")
            self.addCopySpec("/var/log/vdsm-reg/*")
        self._addVdsmRunDir()
        self.addCopySpec("@TRUSTSTORE@")
        self.addCopySpec("@HOOKSDIR@")
        self.addCopySpec("@VDSMLIBDIR@")
        self.addCopySpec("/var/log/ovirt.log")
        self.addCopySpec("/var/log/sanlock.log")
        p = subprocess.Popen(['/usr/bin/pgrep', 'qemu-kvm'],
                             stdout=subprocess.PIPE)
        out, err = p.communicate()
        for line in out.splitlines():
            pid = line.strip()
            self.addCopySpec("/proc/%s/cmdline" % pid)
            self.addCopySpec("/proc/%s/status" % pid)
            self.addCopySpec("/proc/%s/mountstats" % pid)
        self.collectExtOutput("/bin/ls -l /var/log/core")
        self.collectExtOutput("/bin/ls -ldZ /etc/vdsm")
        self.collectExtOutput(
            "/bin/su vdsm -s /bin/sh -c '/usr/bin/tree -l @VDSMREPO@'")
        self.collectExtOutput(
            "/bin/su vdsm -s /bin/sh -c '/bin/ls -lR @VDSMREPO@'")
        self.collectExtOutput("/sbin/lvm vgs -v -o +tags")
        self.collectExtOutput("/sbin/lvm lvs -v -o +tags")
        self.collectExtOutput("/sbin/lvm pvs -v -o +all")
        self.collectExtOutput("/sbin/fdisk -l")
        self.collectExtOutput("/usr/bin/iostat")
        self.collectExtOutput("/sbin/iscsiadm -m node")
        self.collectExtOutput("/sbin/iscsiadm -m session")
        sslopt = ['', '-s '][config.getboolean('vars', 'ssl')]
        vdsclient = "/usr/bin/vdsClient " + sslopt + "0 "
        self.collectExtOutput(vdsclient + "getVdsCapabilities")
        self.collectExtOutput(vdsclient + "getVdsStats")
        self.collectExtOutput(vdsclient + "getAllVmStats")
        self.collectExtOutput(vdsclient + "list")
        self.collectExtOutput(vdsclient + "getVGList")
        self.collectExtOutput(vdsclient + "getDeviceList")
        self.collectExtOutput(vdsclient + "getAllTasksInfo")
        self.collectExtOutput(vdsclient + "getAllTasksStatuses")
        p = subprocess.Popen(vdsclient + "getConnectedStoragePoolsList",
                             shell=True, stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        out, err = p.communicate()
        for line in out.splitlines()[1:-1]:
            pool = line.strip()
            self.collectExtOutput(vdsclient + "getSpmStatus " + pool)
        self.collectExtOutput(
            '/bin/su vdsm -s %s %s/dumpStorageTable.pyc' % (
                '@PYTHON@',
                '@VDSMDIR@',
            )
        )

    def _addVdsmRunDir(self):
        """Add everything under /var/run/vdsm except possibly confidential
        sysprep vfds and sockets"""

        import glob

        for f in glob.glob("@VDSMRUNDIR@/*"):
            if not f.endswith('.vfd') and not f.endswith('/isoUploader') \
                    and not f.endswith('/storage') \
                    and not stat.S_ISSOCK(os.stat(f).st_mode):
                self.addCopySpec(f)
