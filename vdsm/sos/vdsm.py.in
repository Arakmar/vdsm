#
# Copyright 2008-2011 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#

import sos.plugintools
import subprocess
import os


def _importVdsmPylibModule(modName):
    import imp
    import os.path
    from distutils.sysconfig import get_python_lib
    modFile, modPath, modDesc = imp.find_module(
        modName, [os.path.join(get_python_lib(True), "vdsm")])
    mod = imp.load_module(modName, modFile, modPath, modDesc)
    return mod


# This is hack for import vdsm.config module. because this plugin's name was
# same with vdsm module, so it can not import vdsm.config directly. And we
# keep plugin's name for compatibility.
config = _importVdsmPylibModule('config').config


class vdsm(sos.plugintools.PluginBase):
    """VDSM server related information
    """

    optionList = [("logsize", 'max size (MiB) to collect per log file', '',
                   False)]

    def __addCopySpecLogLimit(self, path, logsize=None):
        """
        Glob the files in path and ensure that the sorted cumulative
        list of globbed files isn't larger than logsize in MiB if
        logsize is supplied.  Otherwise grab all files in path
        irrespective of their size.
        """
        if logsize is not None:
            self.addCopySpecLimit(path, logsize)
        else:
            self.addCopySpec(path)

    def setup(self):
        os.environ["LVM_SYSTEM_DIR"] = "@VDSMRUNDIR@/lvm"
        self.collectExtOutput("/etc/init.d/vdsmd status")
        self.addCopySpec("/tmp/vds_installer*")
        self.addCopySpec("/tmp/vds_bootstrap*")
        self.addCopySpec("/etc/vdsm/*")
        self.addCopySpec("/etc/vdsm-reg/*")
        logsize = self.getOption('logsize')
        self.__addCopySpecLogLimit("/var/log/vdsm/*", logsize)
        self.__addCopySpecLogLimit("/var/log/vdsm-reg/*", logsize)
        self._addVdsmRunDir()
        self.addCopySpec("@TRUSTSTORE@")
        self.addCopySpec("@HOOKSDIR@")
        self.addCopySpec("/var/log/ovirt.log")
        self.addCopySpec("/var/log/sanlock.log")
        p = subprocess.Popen(['/usr/bin/pgrep', 'qemu-kvm'],
                             stdout=subprocess.PIPE)
        out, err = p.communicate()
        for line in out.splitlines():
            pid = line.strip()
            self.addCopySpec("/proc/%s/cmdline" % pid)
            self.addCopySpec("/proc/%s/status" % pid)
            self.addCopySpec("/proc/%s/mountstats" % pid)
        self.collectExtOutput("/bin/ls -l /var/log/core")
        self.collectExtOutput("/bin/ls -ldZ /etc/vdsm")
        self.collectExtOutput(
            "/bin/su vdsm -s /bin/sh -c '/usr/bin/tree -l @VDSMREPO@'")
        self.collectExtOutput(
            "/bin/su vdsm -s /bin/sh -c '/bin/ls -lR @VDSMREPO@'")
        self.collectExtOutput("/sbin/lvm vgs -v -o +tags")
        self.collectExtOutput("/sbin/lvm lvs -v -o +tags")
        self.collectExtOutput("/sbin/lvm pvs -v -o +all")
        self.collectExtOutput("/sbin/fdisk -l")
        self.collectExtOutput("/usr/bin/iostat")
        self.collectExtOutput("/sbin/iscsiadm -m node")
        self.collectExtOutput("/sbin/iscsiadm -m session")
        sslopt = ['', '-s '][config.getboolean('vars', 'ssl')]
        vdsclient = "/usr/bin/vdsClient " + sslopt + "0 "
        self.collectExtOutput(vdsclient + "getVdsCapabilities")
        self.collectExtOutput(vdsclient + "getVdsStats")
        self.collectExtOutput(vdsclient + "getAllVmStats")
        self.collectExtOutput(vdsclient + "list")
        self.collectExtOutput(vdsclient + "getVGList")
        self.collectExtOutput(vdsclient + "getDeviceList")
        self.collectExtOutput(vdsclient + "getAllTasksInfo")
        self.collectExtOutput(vdsclient + "getAllTasksStatuses")
        p = subprocess.Popen(vdsclient + "getConnectedStoragePoolsList",
                             shell=True, stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        out, err = p.communicate()
        for line in out.splitlines()[1:-1]:
            pool = line.strip()
            self.collectExtOutput(vdsclient + "getSpmStatus " + pool)
        self.collectExtOutput(
            '/bin/su vdsm -s @PYTHON@ @VDSMDIR@/dumpStorageTable.pyc')

    def _addVdsmRunDir(self):
        """Add everything under /var/run/vdsm except possibly confidential
        sysprep vfds """

        import glob

        for f in glob.glob("@VDSMRUNDIR@/*"):
            if not f.endswith('.vfd') and not f.endswith('/isoUploader') \
                    and not f.endswith('/storage'):
                self.addCopySpec(f)
