#!/bin/sh
# Copyright 2013 IBM, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#

VDSM_TOOL="@BINDIR@/vdsm-tool"
UPGRADE_LOGGING_PARAMS="--vvverbose --append --logfile=@VDSMLOGDIR@/upgrade.log"
prog=vdsm

#### pre-start tasks ####
_dev_has_ipv4() {
    local dev="$1"
    ip -o address show "$dev" | grep -q ' inet '
}

_all_devs_have_ipv4(){
    local dev

    for dev in $1
    do
        _dev_has_ipv4 "$dev" || return 1
    done
    return 0
}

_wait_for_ipv4() {
    # wait up to a timeout for all specified devices to have an ipv4 address
    local i

    for i in `seq 10`
    do
        _all_devs_have_ipv4 "$1" && return 0
        sleep 1
    done
    echo "timeout waiting for ipv4 addresses"
    return 1
}

task_wait_for_network() {
    # interfaces that we depend upon may not have their IP address ready yet
    # see https://bugzilla.redhat.com/show_bug.cgi?id=1174611#c34
    local interfaces dev static_devs

    pushd /etc/sysconfig/network-scripts/ > /dev/null

    # copied from /etc/init.d/network
    interfaces=$(ls ifcfg-* | \
            LC_ALL=C sed -e "$__sed_discard_ignored_files" \
                   -e '/\(ifcfg-lo$\|:\|ifcfg-.*-range\)/d' \
                   -e '{ s/^ifcfg-//g;s/[0-9]/ &/}' | \
            LC_ALL=C sort -k 1,1 -k 2n | \
            LC_ALL=C sed 's/ //')

    for dev in $interfaces
    do
        ifcfg="ifcfg-$dev"
        grep -q '# Generated by VDSM version' "$ifcfg" || continue
        grep -q 'ONBOOT=yes' "$ifcfg" || continue
        grep -q 'IPADDR=' "$ifcfg" || continue
        static_devs="$static_devs $dev"
    done
    popd > /dev/null

    _wait_for_ipv4 "$static_devs"

    # never fail, in order to allow intentionally-downed vdsm-controlled
    # interfaces
    return 0
}

task_configure_coredump() {
    local conf_file="@CONFDIR@/vdsm.conf"
    local getconfitem="@VDSMDIR@/get-conf-item"

    if "${getconfitem}" "${conf_file}" vars core_dump_enable false |
      tr A-Z a-z | grep -q true; then
        echo "/var/log/core/core.%p.%t.dump" > /proc/sys/kernel/core_pattern
    fi
}

task_configure_vdsm_logs() {
    local vdsm_logs="
        @VDSMLOGDIR@/connectivity.log
        @VDSMLOGDIR@/mom.log
        @VDSMLOGDIR@/vdsm.log
    "

    for logfile in ${vdsm_logs}; do
        if [ ! -e "${logfile}" ]; then
            @TOUCH_PATH@ "${logfile}"
            @CHMOD_PATH@ 0644 "${logfile}"
            @CHOWN_PATH@ @VDSMUSER@:@VDSMGROUP@ "${logfile}"
        fi
    done
}

task_run_init_hooks(){
    "@PYTHON@" "@VDSMDIR@/hooks.pyc" before_vdsm_start
}


task_check_is_configured() {
    "$VDSM_TOOL" is-configured
}


task_prepare_transient_repository() {
    "$VDSM_TOOL" setup-transient-repository
    "$VDSM_TOOL" cleanup-transient-repository
}


task_syslog_available() {
    if ! [ -S "/dev/log" ]; then
        echo "    Cannot communicate with syslog daemon for reports. "
        echo "    Install syslog daemon provider, configure it properly"
        echo "    and start the service."
        echo "    (Alternatives: rsyslog, syslog-ng)"
        return 1
    fi
    return 0
}


task_nwfilter(){
    "${VDSM_TOOL}" nwfilter
}


task_dummybr(){
    "${VDSM_TOOL}" dummybr
}


_has_systemd() {
    "@MOUNTPOINT_PATH@" -q /cgroup/systemd ||
        "@MOUNTPOINT_PATH@" -q /sys/fs/cgroup/systemd
}


task_dump_bonding_defaults(){
    "${VDSM_TOOL}" dump-bonding-defaults
}


task_tune_system(){
    "@SYSCTL_PATH@" -q -p "/etc/sysctl.d/vdsm.conf"
}


_CONF_FILE="@CONFDIR@/vdsm.conf"
_GETCONFITEM="@VDSMDIR@/get-conf-item"
_DOM_METADATA_BACKUP_DIR="@VDSMLOGDIR@/backup"

_mk_data_center() {
    local dc
    dc="$("${_GETCONFITEM}" "${_CONF_FILE}" irs repository /rhev/)"
    @MKDIR_P@ "${dc}"
    "@CHOWN_PATH@" @VDSMUSER@:@VDSMGROUP@ "${dc}"
}

_mk_dom_backup() {
    @MKDIR_P@ "${_DOM_METADATA_BACKUP_DIR}" > /dev/null 2>&1
    "@CHOWN_PATH@" @METADATAUSER@:@METADATAGROUP@ "$(dirname "${_DOM_METADATA_BACKUP_DIR}")" > /dev/null 2>&1
    "@CHOWN_PATH@" @METADATAUSER@:@METADATAGROUP@ "${_DOM_METADATA_BACKUP_DIR}" > /dev/null 2>&1
}

_mk_core_path() {
    local core_path=/var/log/core
    if ! [ -d "${core_path}" ]; then
        @MKDIR_P@ "${core_path}" > /dev/null 2>&1
    fi
    "@CHMOD_PATH@" a+tw "${core_path}" > /dev/null 2>&1
}

_mk_run_path() {
    local run_path

    for run_path in "@VDSMRUNDIR@"; do
        @MKDIR_P@ "${run_path}"
        "@CHMOD_PATH@" 755 "${run_path}"
        "@CHOWN_PATH@" @VDSMUSER@:@VDSMGROUP@ "${run_path}"
        "@RESTORECON_PATH@" "${run_path}"
    done
}

_mk_console_path() {
    local console_path=/var/run/ovirt-vmconsole-console
    if ! [ -d "${console_path}" ]; then
        @MKDIR_P@ "${console_path}" > /dev/null 2>&1
    fi
    "@CHOWN_PATH@" @VDSMUSER@:@QEMUGROUP@ "${console_path}"
    "@CHMOD_PATH@" 0775 "${console_path}" > /dev/null 2>&1
    "@CHCON_PATH@" "system_u:object_r:qemu_var_run_t:s0" "${console_path}" > /dev/null 2>&1
}

task_mkdirs(){
    _mk_data_center
    _mk_core_path
    _mk_dom_backup
    _mk_run_path
    _mk_console_path
    "@CHMOD_PATH@" 1777 /dev/shm
}


_free_space() {
    local pathToTest="$1"
    df -P "${pathToTest}" | awk '{print $4}'| tail -1
}

task_test_space() {
    local MIN_SPACE_KB=10000

    if [ "$(_free_space "@VDSMLOGDIR@")" -lt "${MIN_SPACE_KB}" ]; then
        echo "${prog}: low log space"
        return 1
    fi
    return 0
}


task_test_lo() {
    if ! LC_ALL=C "@IP_PATH@" link show lo | "@GREP_PATH@" -q UP; then
        echo "VDSMD: lo interface is down, can't run !"
        echo "VDSMD: lo interface is down, can't run !" > /dev/kmsg
        return 1
    fi
    return 0
}


task_validate_configuration(){
    "$VDSM_TOOL" validate-config
}


task_upgraded_version_check(){
    local upgraded_ver_file="@VDSMLIBDIR@/upgraded_version"
    if [ -f "${upgraded_ver_file}" ]; then
        local ret=0
        if grep -q '^vdsm-4\.10\.' "${upgraded_ver_file}"; then
             # We need to treat the upgrade from 4.10.x specifically
             # by running manual configure command
             "$VDSM_TOOL" configure --force
             ret=$?
        elif grep -q '^vdsm-4\.16\.' "${upgraded_ver_file}"; then
             # REQUIRED_FOR upgrade from vdsm-4.16.z
             "$VDSM_TOOL" configure --module multipath
             ret=$?
        fi
        [ "${ret}" -eq 0 ] && rm -f "${upgraded_ver_file}"
    fi
}
#### pre-start tasks end ####


#### post-stop tasks ####
task_run_final_hooks(){
    "@PYTHON@" "@VDSMDIR@/hooks.pyc" after_vdsm_stop
}
#### post-stop tasks end ####


usage(){
    echo "Usage:"
    echo "vdsm_init_common.sh --pre-start|--post-stop"
}

run_tasks(){
    local tasks="$1"
    for taskName in $tasks ; do
        echo "${prog}: Running ${taskName}"
        "task_${taskName}"
        rt=$?
        if [ "$rt" -ne 0 ]; then
            echo "${prog}: stopped during execute ${taskName} task" \
                 "(task returned with error code ${rt})."
            exit 1
        fi
    done
}

case "$1" in
    --pre-start)
        run_tasks " \
            mkdirs \
            configure_coredump \
            configure_vdsm_logs \
            wait_for_network \
            run_init_hooks \
            upgraded_version_check \
            check_is_configured \
            validate_configuration \
            prepare_transient_repository \
            syslog_available \
            nwfilter \
            dummybr \
            tune_system \
            test_space \
            test_lo \
            "
        ;;
    --post-stop)
        run_tasks " \
            run_final_hooks \
            "
        ;;
    --help|*)
        usage
        exit 1
        ;;
esac
