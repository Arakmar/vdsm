# Copyright 2013 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#

import collections
import os
import sys
from distutils.sysconfig import get_python_lib

from testlib import VdsmTestCase as TestCaseBase
from monkeypatch import MonkeyPatch, MonkeyPatchScope


def path_without_vdsm_ext_mod():
    sub_dirs = ['client', 'vdsm', 'vdsm_api', '@VDSMDIR@']
    exclude_dirs = [os.path.abspath(
                    os.path.join(os.path.dirname(__file__), '..', sub_dir))
                    for sub_dir in sub_dirs]
    return [path for path in sys.path
            if os.path.abspath(path) not in exclude_dirs]


def get_mods(path):
    return [os.path.splitext(entry)[0]
            for entry in os.listdir(os.path.abspath(path))
            if (entry.endswith(".py") or entry.endswith(".pyc"))]


Mod = collections.namedtuple("Mod", ["filename", "modulename"])


class CrossImportsHelpersTests(TestCaseBase):

    def test_get_mods(self):
        mods = (
            # some random samples. Some names must include 'p', 'y', 'c'
            Mod("response.py", "response"),
            Mod("cmdutils.py", "cmdutils"),
            Mod("virtsparsify.py", "virtsparsify"),
            Mod("pthread.py", "pthread"),
            Mod("constants.py", "constants"),
            Mod("compat.py", "compat"),
            Mod("udevadm.py", "udevadm")
        )

        def _listdir(unused):
            return [mod.filename for mod in mods]

        with MonkeyPatchScope([(os, "listdir", _listdir)]):
            self.assertEqual(get_mods("/bogus/unused/path"),
                             [mod.modulename for mod in mods])


class CrossImportsTestCaseShould(TestCaseBase):

    @MonkeyPatch(sys, 'path', path_without_vdsm_ext_mod())
    def test_fail_when_importing_ext_mod(self):
        pkg_name = 'vdsm'
        src_dir = '../lib/%s' % pkg_name
        if os.path.exists(src_dir):
            mods = get_mods(src_dir)
        else:
            mods = get_mods(os.path.join(get_python_lib(), pkg_name))

        # skip the test for m2cutils as we cannot even import it on systems
        # with no M2Crypto
        mods.remove('m2cutils')

        __import__(pkg_name, fromlist=mods)
